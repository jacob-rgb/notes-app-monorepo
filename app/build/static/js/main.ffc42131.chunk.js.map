{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","services/login.js","i18n/index.js","components/Togglable.js","components/LoginForm.js","components/NoteForm.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","token","config","headers","JSON","parse","localStorage","getItem","console","log","axios","get","then","response","data","newObject","Authorization","post","id","put","newToken","login","credentials","CANCEL_BUTTON","Togglable","forwardRef","ref","children","buttonLabel","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","i18n","displayName","LoginForm","handleSubmit","props","onSubmit","type","value","username","name","placeholder","onChange","handleUsernameChange","password","handlePasswordChange","NoteForm","addNote","handleLogout","newNote","setNewNote","togglableRef","useRef","event","preventDefault","noteObject","date","Date","current","target","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","useEffect","noteService","ok","loggedUserJSON","window","handleLogin","loginService","setItem","stringify","setTimeout","notesToShow","filter","userId","returnedNote","prev","removeItem","map","i","key","find","n","changedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffc42131.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important'\r\n    : 'make important';\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n  token = `Bearer ${newToken}`\r\n}\r\n\r\nconst getAll = () => {\r\n  let config = {\r\n    headers: {\r\n      'Authorization': token ? token \r\n                             : `Bearer ${JSON.parse(localStorage.getItem('loggedNoteAppUser'))?.token}` || ''\r\n    }\r\n  };\r\n  console.log(config);\r\n  const request = axios.get(baseUrl, config);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: token\r\n    }\r\n  }\r\n\r\n  const request = axios.post(baseUrl, newObject, config);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const config = {\r\n    headers: {\r\n      'Authorization': token ? token \r\n                             : `Bearer ${JSON.parse(localStorage.getItem('loggedNoteAppUser'))?.token}` || ''\r\n    }\r\n  }\r\n\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject, config)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, setToken }","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/auth/login'\r\n\r\nconst login = async credentials => {\r\n  const { data } = await axios.post(baseUrl, credentials)\r\n  return data\r\n}\r\n\r\nexport default { login }","export default {\r\n  TOGGABLE: {\r\n    CANCEL_BUTTON: 'Exit'\r\n  }\r\n}","import React, {forwardRef, useImperativeHandle, useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport i18n from '../i18n/index'\r\n\r\nconst Togglable = forwardRef(({children, buttonLabel = 'show'}, ref) => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const hideWhenVisible = { display: visible ? 'none' : '' }\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n  const toggleVisibility = () => setVisible(!visible)\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      toggleVisibility\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>{buttonLabel}</button>\r\n      </div>\r\n\r\n      <div style={showWhenVisible}>\r\n        {children}\r\n        <button onClick={toggleVisibility}>\r\n          {i18n.TOGGABLE.CANCEL_BUTTON}\r\n        </button>\r\n      </div>\r\n\r\n    </div>\r\n    )\r\n})\r\n\r\nTogglable.displayName = 'Togglable'\r\n\r\nTogglable.propTypes = {\r\n  buttonLabel: PropTypes.string\r\n}\r\n\r\nexport default Togglable","import React from 'react'\r\nimport Togglable from './Togglable.js'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function LoginForm ({handleSubmit, ...props}) {\r\n  return (\r\n    <Togglable buttonLabel='Show Login'>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <input\r\n            type='text'\r\n            value={props.username}\r\n            name='Username'\r\n            placeholder='Username'\r\n            onChange={props.handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <input\r\n            type='password'\r\n            value={props.password}\r\n            name='Password'\r\n            placeholder='Password'\r\n            onChange={props.handlePasswordChange}\r\n          />\r\n        </div>\r\n        <button id='form-login-button'>\r\n          Login\r\n        </button>\r\n      </form>\r\n    </Togglable>\r\n  )\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  username: PropTypes.string,\r\n\r\n}","import React, {useRef, useState} from 'react'\r\nimport Togglable from './Togglable.js'\r\n\r\nexport default function NoteForm ({addNote, handleLogout}) {\r\n  const [newNote, setNewNote] = useState('')\r\n  const togglableRef = useRef()\r\n\r\n  const handleChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date(),\r\n      important: false\r\n    }\r\n\r\n    addNote(noteObject)\r\n    setNewNote('')\r\n    togglableRef.current.toggleVisibility()\r\n  }\r\n\r\n  return (\r\n    <Togglable buttonLabel='Show Create Note' ref={togglableRef}>\r\n      <h3>Create a new note</h3>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          id='note-content-input'\r\n          placeholder='Write your note content'\r\n          value={newNote}\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <div>\r\n        <button onClick={handleLogout}>\r\n          Logout\r\n        </button>\r\n      </div>\r\n    </Togglable>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Note from './components/Note';\r\nimport Notification from './components/Notification';\r\nimport noteService from './services/notes';\r\nimport loginService from './services/login';\r\nimport LoginForm from './components/LoginForm.js';\r\nimport NoteForm from './components/NoteForm.js';\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]) ;\r\n  \r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(({ok, data}) => {\r\n        setNotes(data)\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteAppUser');\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON);\r\n      setUser(user);\r\n      noteService.setToken(user.token);\r\n    }\r\n  }, [])\r\n\r\n  const handleLogout = () => {\r\n    setUser(null);\r\n    noteService.setToken(null);\r\n    window.localStorage.removeItem('loggedNoteAppUser');\r\n  }\r\n\r\n  const addNote = (noteObject) => {\r\n    noteObject.userId = user.id\r\n    noteService\r\n      .create(noteObject)\r\n      .then(({ok, data: returnedNote}) => {\r\n      console.log(returnedNote);\r\n        setNotes(prev => ([...prev, returnedNote]))\r\n      });\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n  \r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(({ok, data: returnedNote}) => {\r\n        console.log(returnedNote);\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' ${note.id} was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)   \r\n      })\r\n  }\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault()\r\n\r\n    try {\r\n      const {data: user} = await loginService.login({\r\n        username,\r\n        password\r\n      })\r\n  \r\n      window.localStorage.setItem(\r\n        'loggedNoteAppUser', JSON.stringify(user)\r\n      )\r\n\r\n      noteService.setToken(user.token)\r\n\r\n      setUser(user)\r\n      setUsername('')\r\n      setPassword('')\r\n    } catch(e) {\r\n      setErrorMessage('Wrong credentials')\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    }\r\n\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n\r\n      <Notification message={errorMessage} />\r\n\r\n      {\r\n        user\r\n          ? <NoteForm\r\n              addNote={addNote}\r\n              handleLogout={handleLogout}\r\n            />\r\n          : <LoginForm\r\n              username={username}\r\n              password={password}\r\n              handleUsernameChange={\r\n                ({target}) => setUsername(target.value)}\r\n              handlePasswordChange={\r\n                ({target}) => setPassword(target.value)\r\n              }\r\n              handleSubmit={handleLogin}\r\n            />\r\n      }\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all' }\r\n        </button>\r\n      </div>      \r\n      <ul>\r\n        {notesToShow?.map((note, i) => \r\n          <Note\r\n            key={i}\r\n            note={note} \r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        )}\r\n      </ul> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App ","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}